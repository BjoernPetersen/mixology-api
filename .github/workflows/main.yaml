name: Main

on:
  push:
    branches: [ main ]
  pull_request: { }

jobs:
  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: asdf-vm/actions/install@v3
      - name: Dart format check
        run: dart format --set-exit-if-changed --output=none lib test bin

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: asdf-vm/actions/install@v3
      - name: Get dependencies
        run: dart pub get
      - name: Code generation
        run: dart run build_runner build
      - name: Dart analyze
        run: dart analyze --fatal-infos

  build-app-image:
    runs-on: ubuntu-latest
    needs:
      - check-format
      - lint
    if: success() && github.event_name == 'pull_request'
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          push: false
          tags: "ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/app:${{ github.sha }}"

  push-migrations-image:
    runs-on: ubuntu-latest
    if: success() && github.ref_name == github.event.repository.default_branch
    needs:
      - check-format
      - lint
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - # Setting up Docker Buildx with docker-container driver is required
        # at the moment to be able to use a subdirectory with Git context
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:migrations"
          push: true
          tags: "ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/migrations:${{ github.sha }}"

  push-app-image:
    runs-on: ubuntu-latest
    needs:
      - check-format
      - lint
    if: success() && github.ref_name == github.event.repository.default_branch
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/app:${{ github.sha }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [ push-app-image, push-migrations-image ]
    concurrency: production
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - uses: actions/checkout@v4
      - name: Substitute environment variables in values.yaml
        run: "envsubst < values.yaml > values_sub.yaml && mv values_sub.yaml values.yaml"
        env:
          APP_IMAGE_NAME: "ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/app"
          MIGRATIONS_IMAGE_NAME: "ghcr.io/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/migrations"
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          JWT_ACCESS: ${{ secrets.JWT_ACCESS }}
          JWT_OAUTH: ${{ secrets.JWT_OAUTH }}
          JWT_REFRESH: ${{ secrets.JWT_REFRESH }}
      - name: Store Kubeconfig
        run: mkdir ~/.kube && printenv "KUBECONFIG" > ~/.kube/config && chmod 400 ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG_RAW }}
      - name: Upgrade helm installation
        run: helm upgrade api . --install --namespace=mixology --atomic

  clean:
    runs-on: ubuntu-latest
    concurrency: cleanup
    continue-on-error: true
    needs: [ deploy ]
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Clean up old app container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/app
          package-type: container
          min-versions-to-keep: 10
      - name: Clean up old migrations container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/migrations
          package-type: container
          min-versions-to-keep: 10
